<?php

declare(strict_types=1);

namespace MathParser;

/*
* @package     Parsing
* @author      Frank Wikström <frank@mossadal.se>
* @author      Horse Luke <horseluke@126.com>
* @copyright   2015 Frank Wikström
* @license     http://www.opensource.org/licenses/lgpl-license.php LGPL
*
*/

use MathParser\Lexing\{Lexer, Token};
use MathParser\Parsing\Nodes\Node;
use MathParser\Parsing\Parser;

abstract class AbstractMathParser {
	/** Instance of Lexer used for tokenizing */
	public Lexer $lexer;

	/** Instance of Parser used for the actual parsing */
	public Parser $parser;

	/**
	 * List of tokens generated by the Lexer
	 *
	 * @var list<Token>
	 */
	protected array $tokens;

	/** AST generated by the parser */
	protected Node $tree;

	public function setSimplifying(bool $flag): void {
		$this->parser->setSimplifying($flag);
	}

	/**
	 * Return the token list for the last parsed expression.
	 *
	 * @return list<Token>
	 */
	public function getTokenList(): array {
		return $this->tokens;
	}

	/** Return the AST of the last parsed expression. */
	public function getTree(): Node {
		return $this->tree;
	}

	abstract public function parse(string $text): Node;
}
